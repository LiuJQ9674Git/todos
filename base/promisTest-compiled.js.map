{"version":3,"sources":["promisTest.js"],"names":[],"mappings":";;AAAA,IAAI,IAAI,QAAQ,GAAR,CAAR;AACA,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA,SAAS,WAAT,CAAsB,IAAtB,EACsB,QADtB,EACgC;AAC9B,MAAI,WAAW,EAAE,KAAF,EAAf;AACA,KAAG,QAAH,CAAY,IAAZ,EAAkB,QAAlB,EAA4B,UAAU,GAAV,EAAe,IAAf,EAAqB;;AAE/C,QAAI,GAAJ,EAAS,SAAS,MAAT,CAAgB,GAAhB;;AAAT,SAEK,SAAS,OAAT,CAAiB,IAAjB;AACN,GALD,E;;AAOA,SAAO,SAAS,OAAhB;AAED;;AAGD,IAAI,aAAa,EAAE,GAAF,CAAM,CAAE,YAAY,YAAZ,CAAF,EACrB,YAAY,gBAAZ,CADqB,CAAN,CAAjB;AAEA,WAAW,MAAX,CAAkB,UAAS,IAAT,EAAc,KAAd,EAAoB;;AAEpC,UAAQ,GAAR,CAAY,sDAAZ;AACA,UAAQ,GAAR,CAAY,mCAAZ;AACA,UAAQ,GAAR,CAAY,sDAAZ;AACA,UAAQ,GAAR,CAAY,MAAM,QAAN,EAAZ;AACD,CAND,EAMG,UAAS,GAAT,EAAa;AACd,UAAQ,KAAR,CAAc,GAAd;AACD,CARD;;AAYA,SAAS,QAAT,CAAkB,QAAlB,EAA4B,QAA5B,EAAsC;AACpC,SAAO,EAAE,OAAF,CAAU,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AAC1C,OAAG,QAAH,CAAY,KAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,QAAzB,CAAZ,EACE,UAAU,KAAV,EAAiB,IAAjB,EAAuB;AACrB,UAAI,KAAJ,EAAW;AACT,eAAO,IAAI,KAAJ,CAAU,KAAV,CAAP;AACD,OAFD,MAEO;AACL,gBAAQ,WAAW,KAAK,QAAL,EAAnB;AACD;AACF,KAPH;AAQD,GATM,CAAP;AAUD;;AAED,SAAS,EAAT,EAAa,YAAb,EACG,IADH,CACQ,UAAU,QAAV,EAAoB;AACxB,SAAO,SAAS,QAAT,EAAmB,gBAAnB,CAAP;AACD,CAHH,EAIG,IAJH,CAIQ,UAAU,SAAV,EAAqB;AACzB,UAAQ,GAAR,CAAY,SAAZ;AACD,CANH,EAOG,KAPH,CAOS,UAAU,KAAV,EAAiB;AACtB,UAAQ,GAAR,CAAY,KAAZ;AACD,CATH,EASK,IATL","file":"promisTest-compiled.js","sourcesContent":["var Q = require('q');\nvar fs = require('fs');\nvar path = require('path');\n\n/**\nfunction readFile(fileName) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(fileName, function (err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\nreadFile('index.html').then(\n  function(data) {\n    console.log(data.toString());\n  },\n  function(err) {\n    throw err;\n  }\n);\n**/\n\n/**\nnew Promise(function(res, rej) {\n  console.log(Date.now() + \" start setTimeout 1\");\n  setTimeout(res, 2000);\n}).then(function() {\n  console.log(Date.now() + \" timeout 1 call back\");\n  return 1024;\n}).then(function(arg) {\n  console.log(Date.now() + \" last onFulfilled return \" + arg);\n});\n**/\n\n/**\nfunction timeout1() {\n  return new Promise(function(res, rej) {\n    console.log(Date.now() + \" start timeout1\");\n    setTimeout(res, 2000);\n  });\n}\nfunction timeout2() {\n  console.log(Date.now() + \" timeout 1 call back\");\n  return new Promise(function(res, rej) {\n    console.log(Date.now() + \" start timeout2\");\n    setTimeout(res, 3000);\n  });\n}\nfunction timeout3() {\n  console.log(Date.now() + \" timeout 2 call back\");\n  return new Promise(function(res, rej) {\n    console.log(Date.now() + \" start timeout3\");\n    setTimeout(res, 4000);\n  });\n}\nfunction timeout4() {\n  console.log(Date.now() + \" timeout 3 call back\");\n  return new Promise(function(res, rej) {\n    console.log(Date.now() + \" start timeout4\");\n    setTimeout(res, 5000);\n  });\n}\ntimeout1()\n  .then(timeout2)\n  .then(timeout3)\n  .then(timeout4)\n  .then(function() {\n    console.log(Date.now() + \" timout4 callback\");\n  });\n  **/\n/**\nfs.readFile('index.html', function (err, data) {\n if (err) throw err;\n  console.log(data.toString());\n});\n**/\n\n/**\nfunction callp1() {\n  console.log(Date.now() + \" start callp1\");\n  return new Promise(function(res, rej) {\n    setTimeout(res, 2000);\n  });\n}\nfunction callp2() {\n  console.log(Date.now() + \" start callp2\");\n  return new Promise(function(res, rej) {\n    setTimeout(function() {\n      res({arg1: 4, arg2: \"arg2 value\"});\n    }, 3000);\n  });\n}\nfunction callp3(arg) {\n  console.log(Date.now() + \" start callp3 with arg = \" + arg);\n  return new Promise(function(res, rej) {\n    setTimeout(function() {\n      res(\"callp3\");\n    }, arg * 1000);\n  });\n}\ncallp1().then(function() {\n  console.log(Date.now() + \" callp1 return\");\n  return callp2();\n}).then(function(ret) {\n  console.log(Date.now() + \" callp2 return with ret value = \" + JSON.stringify(ret));\n  return callp3(ret.arg1);\n}).then(function(ret) {\n  console.log(Date.now() + \" callp3 return with ret value = \" + ret);\n})\n**/\n/**\nvar fs_readFile = Q.denodeify(fs.readFile)\nvar promise = fs_readFile('index.html')\npromise.then(console.log, console.error)\n**/\n\n/**\nfunction fs_readFile (file, encoding) {\n  var deferred = Q.defer()\n  fs.readFile(file, encoding, function (err, data) {\n    if (err) deferred.reject(err) // rejects the promise with `er` as the reason\n    else deferred.resolve(data.toString()) // fulfills the promise with `data` as the value\n  })\n  return deferred.promise // the promise is returned\n}\nfs_readFile('index.html').then(console.log, console.error)\n\nfunction fs_readFile (file, encoding, callback) {\n  var deferred = Q.defer()\n  fs.readFile(file, encoding, function (err, data) {\n    // rejects the promise with `er` as the reason\n  if (err) deferred.reject(err)\n  // fulfills the promise with `data` as the value\n  else deferred.resolve(data)\n  })\n  // the promise is returned\n  return deferred.promise.nodeify(callback)\n}\n\nfs_readFile('index.html', 'utf8', function (er, data) {\n  console.log(data.toString());\n})\n**/\n/**\nfunction fs_readFile (file,\n                      encoding) {\n  var deferred = Q.defer()\n  fs.readFile(file, encoding, function (err, data) {\n    // rejects the promise with `er` as the reason\n    if (err) deferred.reject(err)\n    // fulfills the promise with `data` as the value\n    else deferred.resolve(data)\n  })\n  // the promise is returned\n  return deferred.promise\n\n}\n**/\n\n\nfunction fs_readFile (file,\n                      encoding) {\n  var deferred = Q.defer()\n  fs.readFile(file, encoding, function (err, data) {\n    // rejects the promise with `er` as the reason\n    if (err) deferred.reject(err)\n    // fulfills the promise with `data` as the value\n    else deferred.resolve(data)\n  })//fs.readFile\n  // the promise is returned\n  return deferred.promise\n\n}\n\n\nvar allPromise = Q.all([ fs_readFile('index.html'),\n  fs_readFile('applycall.html') ])\nallPromise.spread(function(data,data1){\n  //console.log(data.toString());\n  console.log('====================================================');\n  console.log('============世界好,北京好==============');\n  console.log('====================================================');\n  console.log(data1.toString());\n}, function(err){\n  console.error(err);\n})\n\n\n\nfunction readFile(previous, fileName) {\n  return Q.promise(function (resolve, reject) {\n    fs.readFile(path.join(process.cwd(), fileName),\n      function (error, text) {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(previous + text.toString());\n        }\n      });\n  });\n}\n\nreadFile('', 'index.html')\n  .then(function (previous) {\n    return readFile(previous, 'applycall.html');\n  })\n  .then(function (finalText) {\n    console.log(finalText);\n  })\n  .catch(function (error) {\n    console.log(error);\n  }).done();\n\n/**\nvar promise = readFile()\nvar promise2 = promise.then(function (data) {\n  return readAnotherFile()\n}, function (err) {\n  console.error(err)\n  // if readFile was unsuccessful,\n  //let's log it but still readAnotherFile\n  return readAnotherFile()\n})\n// the result of readAnotherFile\npromise2.then(console.log, console.error)\n**/\n/**\nvar promise = readFile()\nvar promise2 = promise.then(readAnotherFile, console.error)\n**/\n/**\nreadFile(function (err, data) {\n  if (err) return console.error(err)\n  console.log(data)\n})\n\nvar promise = readFile()\npromise.then(console.log, console.error)\n\nreadFile()\n  .then(readAnotherFile)\n  .then(doSomethingElse)\n  .then()\n\n\nreadFile()\n  .then(function (data) {\n    return readAnotherFile().then(function () {\n      // do something with `data`\n    })\n  })\n\ntry {\n  doThis()\n  doThat()\n} catch (err) {\n  console.error(err)\n}\n\ndoThisAsync()\n  .then(doThatAsync)\n  .then(null, console.error)\n **/\n\n\n"]}