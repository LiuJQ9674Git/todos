{"version":3,"sources":["findlargestmodulized.js"],"names":[],"mappings":";;;;;AAGA,SAAS,QAAT,CAAmB,KAAnB,EAA0B,EAA1B,EAA8B;AAC5B,MAAI,UAAU,MAAM,MAApB;AACA,MAAI,UAAU,KAAd;AACA,MAAI,QAAQ,EAAZ;AACA,QAAM,OAAN,CAAc,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AACnC,OAAG,IAAH,CAAQ,IAAR,EAAc,UAAU,EAAV,EAAc,IAAd,EAAoB;AAChC,UAAI,OAAJ,EAAa;AACb,UAAI,EAAJ,EAAQ;AACN,kBAAU,IAAV;AACA,eAAO,GAAG,EAAH,CAAP;AACD;AACD,YAAM,KAAN,IAAe,IAAf;AACA,UAAI,EAAE,OAAF,IAAa,CAAjB,EAAoB,GAAG,IAAH,EAAS,KAAT;AACrB,KARD;AASD,GAVD;AAWD;;AAED,SAAS,cAAT,CAAyB,KAAzB,EAAgC,KAAhC,EAAuC;AACrC,MAAI,UAAU,MACX,MADW,CACJ,UAAU,IAAV,EAAgB;AAAE,WAAO,KAAK,MAAL,EAAP;AAAsB,GADpC,EAEX,MAFW,CAEJ,UAAU,IAAV,EAAgB,IAAhB,EAAsB;AAC5B,QAAI,KAAK,IAAL,GAAY,KAAK,IAArB,EAA2B,OAAO,IAAP;AAC3B,WAAO,IAAP;AACD,GALW,CAAd;AAMA,SAAO,MAAM,MAAM,OAAN,CAAc,OAAd,CAAN,CAAP;AACD;;AAED,IAAI,KAAK,QAAQ,IAAR,CAAT;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,OAAO,OAAP,GAAiB,UAAU,GAAV,EAAe,EAAf,EAAmB;AAClC,KAAG,OAAH,CAAW,GAAX,EAAgB,UAAU,EAAV,EAAc,KAAd,EAAqB;AACnC,QAAI,EAAJ,EAAQ,OAAO,GAAG,EAAH,CAAP;AACR,QAAI,QAAQ,MAAM,GAAN,CAAU,UAAU,IAAV,EAAgB;;AACpC,aAAO,KAAK,IAAL,CAAU,GAAV,EAAc,IAAd,CAAP;AACD,KAFW,CAAZ;AAGA,aAAS,KAAT,EAAgB,UAAU,EAAV,EAAc,KAAd,EAAqB;AACnC,UAAI,EAAJ,EAAQ,OAAO,GAAG,EAAH,CAAP;AACR,UAAI,cAAc,eAAe,KAAf,EAAsB,KAAtB,CAAlB;AACA,SAAG,IAAH,EAAS,WAAT;AACD,KAJD;AAKD,GAVD;AAWD,CAZD","file":"findlargestmodulized-compiled.js","sourcesContent":["/**\n * Created by liujianqiang on 16/6/20.\n */\nfunction getStats (paths, cb) {\n  var counter = paths.length;\n  var errored = false;\n  var stats = [];\n  paths.forEach(function (path, index) {\n    fs.stat(path, function (er, stat) {\n      if (errored) return;\n      if (er) {\n        errored = true;\n        return cb(er);\n      }\n      stats[index] = stat;\n      if (--counter == 0) cb(null, stats);\n    })\n  })\n}\n\nfunction getLargestFile (files, stats) {\n  var largest = stats\n    .filter(function (stat) { return stat.isFile() })\n    .reduce(function (prev, next) {\n      if (prev.size > next.size) return prev\n      return next\n    })\n  return files[stats.indexOf(largest)]\n}\n\nvar fs = require('fs')\nvar path = require('path')\nmodule.exports = function (dir, cb) {\n  fs.readdir(dir, function (er, files) {\n    if (er) return cb(er)\n    var paths = files.map(function (file) {// [1]\n      return path.join(dir,file)\n    })\n    getStats(paths, function (er, stats) {\n      if (er) return cb(er)\n      var largestFile = getLargestFile(files, stats)\n      cb(null, largestFile)\n    })\n  })\n}\n"]}